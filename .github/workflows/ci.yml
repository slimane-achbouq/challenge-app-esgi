name: CI

on:
  push:
#    branches:
#      - main
  pull_request: ~
  workflow_dispatch: ~

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Pull images
        run: docker compose pull --ignore-pull-failures || true
      
      - name: Start services
        run: docker compose up --build -d
      
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker compose ps
                docker compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      
      - name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost
      
      - name: Check API reachability
        run: curl -vk -o /dev/null https://localhost
      
      - name: Check PWA reachability
        run: "curl -vk -o /dev/null -H 'Accept: text/html' https://localhost"
      
      - name: Create test database
        run: |
          docker compose exec -T php bin/console d:d:c --env=test
          docker compose exec -T php bin/console d:s:u --force --no-interaction --env=test
          docker compose exec -T php bin/console d:f:l --env=test --no-interaction
          docker compose exec -T php bin/console lexik:jwt:generate-keypair
      
      - name: PHPUnit
        run: docker compose exec -T php bin/phpunit
      
      - name: Doctrine Schema Validator
        run: docker compose exec -T php bin/console doctrine:schema:validate --skip-sync
  build-and-push:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push PHP Image
        uses: docker/build-push-action@v2
        with:
          context: ./api
          target: app_php
          push: true
          tags: slimane2/challenge-app-esgi-php:latest, slimane2/challenge-app-esgi-php:${{ github.run_number }}

      - name: Build and push Caddy Image
        uses: docker/build-push-action@v2
        with:
          context: ./api
          target: app_caddy
          push: true
          tags: slimane2/challenge-app-esgi-caddy:latest, slimane2/challenge-app-esgi-caddy:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      PHP_IMAGE_NAME: "challenge-app-esgi-php"
      CADDY_IMAGE_NAME: "challenge-app-esgi-caddy"
      DIGITALOCEAN_REGISTRY: ${{ secrets.DIGITALOCEAN_REGISTRY }}
      SERVER_NAME: ${{ secrets.SERVER_NAME }}
      APP_SECRET: ${{ secrets.APP_SECRET }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      CADDY_MERCURE_JWT_SECRET: ${{ secrets.CADDY_MERCURE_JWT_SECRET }}

    steps:
      - name: Deploy to DigitalOcean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.DIGITALOCEAN_SERVER_PASSWORD }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: PHP_IMAGE_NAME,CADDY_IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA,SERVER_NAME,APP_SECRET,POSTGRES_PASSWORD,CADDY_MERCURE_JWT_SECRET
          script: |
            cd challenge-app-esgi

            # Maj base code
            git pull origin main
            
            # Stop running container
            docker stop challenge-app-esgi-caddy-1 challenge-app-esgi-php-1

            # Remove old container
            docker rm challenge-app-esgi-caddy-1 challenge-app-esgi-php-1
            
            # Build php & caddy containers from latest pushed images to our DockerHub
            SERVER_NAME=$(echo $SERVER_NAME) \
            APP_SECRET=$(echo $APP_SECRET) \
            POSTGRES_PASSWORD=$(echo $POSTGRES_PASSWORD) \
            CADDY_MERCURE_JWT_SECRET=$(echo $CADDY_MERCURE_JWT_SECRET) \
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            
            
            
